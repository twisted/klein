[tox]

envlist =
    flake8, black, mypy
    coverage-py{35,36,37,38,39,py3}-tw{184,192,current,trunk}
    coverage_report
    docs, docs-linkcheck
    packaging

skip_missing_interpreters = {tty:True:False}


[default]

basepython = python3.8

deps =
    tw160: Twisted==16.0.0
    tw161: Twisted==16.1.1
    tw162: Twisted==16.2.0
    tw163: Twisted==16.3.2
    tw164: Twisted==16.4.1
    tw165: Twisted==16.5.0
    tw166: Twisted==16.6.0
    tw171: Twisted==17.1.0
    tw175: Twisted==17.5.0
    tw179: Twisted==17.9.0
    tw184: Twisted==18.4.0
    tw187: Twisted==18.7.0
    tw189: Twisted==18.9.0
    tw192: Twisted==19.2.1
    tw197: Twisted==19.7.0
    tw1910: Twisted==19.10.0
    tw203: Twisted==20.3.0
    twcurrent: Twisted
    twtrunk: https://github.com/twisted/twisted/archive/trunk.zip

    attrs==19.3.0
    hyperlink==19.0.0
    incremental==17.5.0
    six==1.15.0
    Tubes==0.2.0
    Werkzeug==1.0.1
    zope.interface==5.1.0

    {test,coverage}: treq==20.3.0
    {test,coverage}-py{27,py2}: hypothesis==4.57.1  # rq.filter: <5
    {test,coverage}-py{35,36,37,38,39,py3}: hypothesis==5.8.6
    {test,coverage}: idna==2.8
    {test,coverage}-py{27,py2}: mock==3.0.5  # rq.filter: <4
    {test,coverage}-py{27,py2}: typing==3.7.4.1

    coverage: {[testenv:coverage_report]deps}

setenv =
    PY_MODULE=klein

    PYTHONPYCACHEPREFIX={envtmpdir}/pycache


##
# Default environment: unit tests
##

[testenv]

description = run tests

basepython =
    py35: python3.5
    py36: python3.6
    py37: python3.7
    py38: python3.8
    py39: python3.9

    pypy3: pypy3

deps = {[default]deps}

setenv =
    {[default]setenv}

    coverage: COVERAGE_FILE={toxworkdir}/coverage.{envname}

commands =
    # Run trial without coverage
    test: trial --random=0 --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}

    # Run trial with coverage
    coverage: coverage run --source {env:PY_MODULE} "{envdir}/bin/trial" --random=0 --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}

    # Run coverage reports, ignore exit status
    coverage: - coverage report --skip-covered


##
# Black code formatting
##

[testenv:black]

description = run Black (linter)

basepython = {[default]basepython}

skip_install = True

deps =
    black==19.10b0

setenv =
    BLACK_LINT_ARGS=--check

commands =
    black {env:BLACK_LINT_ARGS:} {posargs:release.py src}


[testenv:black-reformat]

description  = {[testenv:black]description} and reformat
basepython   = {[testenv:black]basepython}
skip_install = {[testenv:black]skip_install}
deps         = {[testenv:black]deps}
commands     = {[testenv:black]commands}


##
# Flake8 linting
##

[testenv:flake8]

description = run Flake8 (linter)

basepython = {[default]basepython}

skip_install = True

deps =
    flake8-bugbear==20.1.4
    flake8-docstrings==1.5.0
    flake8-import-order==0.18.1
    flake8-mutable==1.2.0
    flake8-pep3101==1.3.0
    flake8==3.8.3
    mccabe==0.6.1
    pep8-naming==0.10.0
    pycodestyle==2.6.0
    pydocstyle==5.0.2
    # pin pyflakes pending a release with https://github.com/PyCQA/pyflakes/pull/455
    git+git://github.com/PyCQA/pyflakes@ffe9386#egg=pyflakes

commands =
    flake8 {posargs:release.py setup.py src/{env:PY_MODULE}}


[flake8]

# !!! BRING THE PAIN !!!
select = A,B,B9,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z

show-source = True
doctests    = True

max-line-length = 80

# Codes: http://flake8.pycqa.org/en/latest/user/error-codes.html
ignore =
    ######## WARNINGS BELOW SHOULD BE FIXED ########

    # Missing docstring in public module
    D100,

    # Missing docstring in public class
    D101,

    # Missing docstring in public method
    D102,

    # Missing docstring in public function
    D103,

    # Missing docstring in public package
    D104,

    # Missing docstring in magic method
    D105,

    # Missing docstring in __init__
    D107,

    # Use """triple double quotes"""
    D300,

    # First word of the first line should be properly capitalized
    D403,

    # Additional newline in a group of imports
    I202,

    ######## WARNINGS ABOVE SHOULD BE FIXED ########

    # Invalid first argument used for instance method
    B902,

    # One-line docstring should fit on one line with quotes
    D200,

    # No blank lines allowed after function docstring
    D202,

    # 1 blank line required between summary line and description
    D205,

    # First line should end with a period
    D400,

    # First line should be in imperative mood
    D401,

    # missing whitespace after ','
    E231,

    # function name should be lowercase
    N802,

    # argument name should be lowercase
    N803,

    # first argument of a method should be named 'self'
    N805,

    # variable in function should be lowercase
    N806,

    # lowercase imported as non lowercase
    N812,

    # variable in class scope should not be mixedCase
    N815,

    # variable in global scope should not be mixedCase
    N816,

    # line break before binary operator
    W503,

    # End of list (allows last item to end with trailing ',')
    EOL

# flake8-import-order: local module name space
application-import-names = klein

# McCabe complexity checker
max-complexity = 60


##
# Mypy static type checking
##

[testenv:mypy]

description = run Mypy (static type checker)

basepython = {[default]basepython}

deps =
    mypy==0.780
    mypy_extensions==0.4.3

    {[default]deps}

commands =
    mypy                                       \
        --config-file="{toxinidir}/tox.ini"    \
        --cache-dir="{toxworkdir}/mypy_cache"  \
        {tty:--pretty:}                        \
        {posargs:release.py setup.py src}


[mypy]

# Global settings

disallow_incomplete_defs = True
disallow_untyped_defs    = True
no_implicit_optional     = True
show_column_numbers      = True
show_error_codes         = True
strict_optional          = True
warn_no_return           = True
warn_redundant_casts     = True
warn_return_any          = True
warn_unreachable         = True
warn_unused_ignores      = True

# Enable these over time
check_untyped_defs       = False
disallow_any_generics    = False

# Disable some checks until effected files fully adopt mypy

[mypy-klein._app]
allow_untyped_defs = True

[mypy-klein._plating]
allow_untyped_defs = True

[mypy-klein._resource]
allow_untyped_defs = True

[mypy-klein.test._trial]
allow_untyped_defs = True

[mypy-klein.test.test_app]
allow_untyped_defs = True

[mypy-klein.test.test_plating]
allow_untyped_defs = True

[mypy-klein.test.test_resource]
allow_untyped_defs = True

[mypy-klein.test.util]
allow_untyped_defs = True

# Don't complain about dependencies known to lack type hints

[mypy-constantly]
ignore_missing_imports = True

[mypy-git.*]
ignore_missing_imports = True

[mypy-hyperlink]
ignore_missing_imports = True

[mypy-incremental]
ignore_missing_imports = True

[mypy-zope.interface]
[mypy-zope.interface.*]
ignore_missing_imports = True

[mypy-treq]
ignore_missing_imports = True
[mypy-treq.*]
ignore_missing_imports = True

[mypy-hypothesis]
ignore_missing_imports = True
[mypy-hypothesis.*]
ignore_missing_imports = True

[mypy-idna]
ignore_missing_imports = True

[mypy-setuptools]
ignore_missing_imports = True

[mypy-tubes.*]
ignore_missing_imports = True

[mypy-twisted.*]
ignore_missing_imports = True


##
# Coverage report
##

[testenv:coverage_report]

description = generate coverage report

depends =
    coverage-py{35,36,37,38,39,py3}-tw{1,2}{0,1,2,3,4,5,6,7,8,9}{0,1,2,3,4,5,6,7,8,9}
    coverage-py{35,36,37,38,39,py3}-tw{current,trunk}

basepython = {[default]basepython}

skip_install = True

deps =
    coverage==5.1

setenv =
    {[default]setenv}

    COVERAGE_FILE={toxworkdir}/coverage

commands =
    coverage combine
    - coverage report
    - coverage html


##
# Codecov
##

[testenv:codecov]

description = upload coverage to Codecov

depends = {[coverage_report]depends}

basepython = python

skip_install = True

deps =
    {[testenv:coverage_report]deps}
    codecov==2.1.4

passenv =
    # See https://github.com/codecov/codecov-python/blob/master/README.md#using-tox
    # And CI-specific docs:
    #   https://help.github.com/en/articles/virtual-environments-for-github-actions#default-environment-variables
    #   https://docs.travis-ci.com/user/environment-variables#default-environment-variables
    #   https://www.appveyor.com/docs/environment-variables/
    TOXENV CODECOV_* CI
    GITHUB_*
    TRAVIS TRAVIS_*
    APPVEYOR APPVEYOR_*

setenv =
    {[testenv:coverage_report]setenv}

    COVERAGE_XML={envlogdir}/coverage_report.xml

commands =
    # Note documentation for CI variables in passenv above
    coverage combine
    coverage xml --ignore-errors -o "{env:COVERAGE_XML}"
    codecov --file="{env:COVERAGE_XML}" --env                 \
        GITHUB_REF GITHUB_COMMIT GITHUB_USER GITHUB_WORKFLOW  \
        TRAVIS_BRANCH TRAVIS_BUILD_WEB_URL                    \
        TRAVIS_COMMIT TRAVIS_COMMIT_MESSAGE                   \
        APPVEYOR_REPO_BRANCH APPVEYOR_REPO_COMMIT             \
        APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL                     \
        APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED


##
# Documentation
##

[testenv:docs]

description = build documentation

basepython = {[default]basepython}

deps =
    sphinx==3.1.0
    sphinx_rtd_theme==0.4.3

commands =
    sphinx-build                           \
        -b html -d "{envtmpdir}/doctrees"  \
        "{toxinidir}/docs"                 \
        "{toxinidir}/htmldocs"


[testenv:docs-auto]

description = build documentation and rebuild automatically

basepython = {[default]basepython}

deps =
    {[testenv:docs]deps}
    sphinx-autobuild==0.7.1

commands =
    sphinx-autobuild                       \
        -b html -d "{envtmpdir}/doctrees"  \
        --host=localhost                   \
        "{toxinidir}/docs"                 \
        "{toxinidir}/htmldocs"


[testenv:apidocs]

basepython = python3.8

deps =
    git+git://github.com/twisted/pydoctor@c74016b#egg=pydoctor

commands =
    pydoctor                                               \
        --project-name=klein                               \
        --project-url="https://github.com/twisted/klein/"  \
        --project-base-dir="{toxinidir}"                   \
        --add-package="{toxinidir}/src/klein"              \
        --html-output="{toxinidir}/apidocs"                \
        --make-html


##
# Check for broken links in documentation
##

[testenv:docs-linkcheck]

description = check for broken links in documentation

basepython = {[default]basepython}

deps = {[testenv:docs]deps}

commands =
    sphinx-build -b html -d "{envtmpdir}/doctrees" docs docs/_build/html
    sphinx-build -b linkcheck docs docs/_build/html


##
# Packaging
##

[testenv:packaging]

description = check for potential packaging problems

basepython = {[default]basepython}

skip_install = True

deps =
   check-manifest==0.42
   readme-renderer==26.0
   twine==3.1.1

commands =
   check-manifest
   pip wheel --wheel-dir "{envtmpdir}/dist" --no-deps {toxinidir}
   twine check "{envtmpdir}/dist/"*


##
# Print dependencies
##

[testenv:dependencies]

description = print dependencies

basepython = {[default]basepython}

recreate = true

deps =

commands =
    pip freeze


##
# Release
##

[testenv:release]

description = invoke tool to manage a release branch

basepython = {[default]basepython}

skip_install = True

deps =
    click==7.1.2
    GitPython==3.1.3
    incremental[scripts]==17.5.0
    twine==3.1.1

passenv =
    SSH_AUTH_SOCK

commands =
    python "{toxinidir}/release.py" {posargs}
